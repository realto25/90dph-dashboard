generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  location    String
  description String
  imageUrl    String
  plots       Plot[]
  createdAt   DateTime @default(now())
}

model Plot {
  id            String         @id @default(cuid())
  title         String
  dimension     String
  totalArea     Float          @default(0)
  price         Int
  priceLabel    String
  status        PlotStatus     @default(AVAILABLE)
  imageUrls     String[]
  location      String
  latitude      Float
  longitude     Float
  facing        String
  amenities     String[]
  mapEmbedUrl   String?        @db.Text
  qrUrl         String?        @db.Text
  description   String         @db.Text
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  owner         User?          @relation("PlotOwner", fields: [ownerId], references: [id])
  ownerId       String?
  visitRequests VisitRequest[]
  camera        Camera?
  clientPlot    ClientPlot?
  sellRequests  SellRequest[]
  lands         Land[]
  createdAt     DateTime       @default(now())
}

model User {
  id                    String         @id @default(cuid())
  clerkId               String         @unique
  name                  String
  email                 String         @unique
  phone                 String?
  role                  UserRole       @default(GUEST)
  visitRequests         VisitRequest[]
  feedback              Feedback[]
  ownedPlots            Plot[]         @relation("PlotOwner")
  ownedLands            Land[]         @relation("LandOwner")
  clientPlots           ClientPlot[]
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  sellRequests          SellRequest[]
  buyRequests           BuyRequest[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  attendances           Attendance[]
  managerOffices        Office[]       @relation("ManagerOffices")
  LeaveRequest          LeaveRequest[]
  assignedVisitRequests VisitRequest[] @relation("AssignedManager")
  Notification          Notification[]
}

model ClientPlot {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String   @unique
  createdAt DateTime @default(now())
}

model Camera {
  id        String   @id @default(cuid())
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String   @unique
  ipAddress String
  label     String?
  createdAt DateTime @default(now())
}

model VisitRequest {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String
  date      DateTime
  time      String
  status    String    @default("PENDING")
  qrCode    String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?
  plot              Plot      @relation(fields: [plotId], references: [id])
  plotId            String
  assignedManager   User?     @relation("AssignedManager", fields: [assignedManagerId], references: [id])
  assignedManagerId String?
  Feedback          Feedback?

  @@index([userId])
  @@index([plotId])
  @@index([assignedManagerId])
}

model Feedback {
  id               String       @id @default(cuid())
  rating           Int
  experience       String
  suggestions      String
  purchaseInterest Boolean?
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  visitRequest     VisitRequest @relation(fields: [visitRequestId], references: [id], onDelete: Cascade)
  visitRequestId   String       @unique
  createdAt        DateTime     @default(now())

  @@unique([visitRequestId, userId]) // Ensure one feedback per visit request and user
  @@index([rating])
  @@index([userId])
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model SellRequest {
  id               String            @id @default(cuid())
  plotId           String
  plot             Plot              @relation(fields: [plotId], references: [id], onDelete: Cascade)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  askingPrice      Float?
  potentialProfit  Float?
  profitPercentage Float?
  reason           String?           @db.Text
  urgency          UrgencyLevel      @default(NORMAL)
  agentAssistance  Boolean           @default(false)
  documents        String[]
  termsAccepted    Boolean           @default(false)
  status           SellRequestStatus @default(PENDING)
  adminNotes       String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  approvedAt       DateTime?
  rejectedAt       DateTime?
  completedAt      DateTime?

  @@index([plotId])
  @@index([userId])
  @@index([status])
  @@map("sell_requests")
}

model BuyRequest {
  id        String        @id @default(cuid())
  land      Land          @relation(fields: [landId], references: [id], onDelete: Cascade)
  landId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String        @db.Text
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
  @@index([userId])
  @@index([landId])
}

model Land {
  id          String       @id @default(cuid())
  number      String
  size        String
  price       Int
  status      PlotStatus   @default(AVAILABLE)
  imageUrl    String?
  plot        Plot         @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId      String
  owner       User?        @relation("LandOwner", fields: [ownerId], references: [id])
  ownerId     String?
  camera      LandCamera?
  buyRequests BuyRequest[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([plotId])
  @@index([status])
  @@index([ownerId])
}

model LandCamera {
  id        String   @id @default(cuid())
  land      Land     @relation(fields: [landId], references: [id], onDelete: Cascade)
  landId    String   @unique
  ipAddress String
  label     String?
  createdAt DateTime @default(now())
}

enum UserRole {
  GUEST
  CLIENT
  MANAGER
  ADMIN
  SUPERADMIN
}

enum PlotStatus {
  AVAILABLE
  ADVANCE
  SOLD
}

enum VisitStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum UrgencyLevel {
  LOW
  NORMAL
  HIGH
}

enum SellRequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model Office {
  id          String       @id @default(cuid())
  name        String       @unique
  latitude    Float
  longitude   Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  managers    User[]       @relation("ManagerOffices")
  attendances Attendance[]

  @@index([name])
}

model Attendance {
  id        String   @id @default(cuid())
  manager   User     @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId String
  office    Office   @relation(fields: [officeId], references: [id], onDelete: Cascade)
  officeId  String
  status    String   @default("PRESENT")
  createdAt DateTime @default(now())

  @@unique([managerId, officeId, createdAt])
  @@index([managerId, createdAt])
  @@index([officeId, createdAt])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_DUTY
}

model LeaveRequest {
  id        String        @id @default(cuid())
  manager   User          @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId String
  startDate DateTime
  endDate   DateTime
  reason    String        @db.Text
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([managerId])
  @@index([status])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  type      String   @default("INFO")
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([isRead])
}

model BannerAd {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  imageUrl    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}
